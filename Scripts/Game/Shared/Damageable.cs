using UnityEngine;

namespace Unity.FPS.Game
{
    public class Damageable : MonoBehaviour
    {
        [Tooltip("Multiplier to apply to the received damage")]
        public float DamageMultiplier = 1f;

        [Range(0, 1)] [Tooltip("Multiplier to apply to self damage")]
        public float SensibilityToSelfdamage = 0.5f;
        // Start is called before the first frame update
        [Range(0, 100f)] [Tooltip("The damage that the shield can suffer")] public float ShieldValue = 1f;
        [Range(5, 100f)][Tooltip("The maxmum damage that the shield can recover")] public float MaxShieldValue = 100f;
        [Tooltip("The cool down time of shield after its broken")] public float BrokenShieldRecoverFrequency = 10f;
        [Tooltip("The speed of shield recovering per second")] public float ShieldRecoverFrequency = 1;
        [Tooltip("The value of shield recovering in each recover")] public float ShieldRecoverValue = 0;
        private float updateShieldDDL;
        public Health Health { get; private set; }

        void Awake()
        {
            // find the health component either at the same level, or higher in the hierarchy
            // this is used as: when you pick up an item with health, this code will apply the 
            // effection of the pick-up to the player himself
            Health = GetComponent<Health>();
            if (!Health)
            {
                Health = GetComponentInParent<Health>();
                
            }
            updateShieldDDL = Time.time;
        }

        void Update()
        {
            // TODO: this file is written for create a shield for the player to reduce damage
            // need to communicate with "Health"
            // the shield should has a value, and it also should be generated by an element
            //update new armer
            if (Time.time > updateShieldDDL)
            {
                updateShieldDDL += ShieldRecoverFrequency;
                ShieldValue = ShieldRecoverValue + ShieldValue > MaxShieldValue ? MaxShieldValue : ShieldRecoverValue + ShieldValue;
            }
        }

        public void InflictDamage(float damage, bool isExplosionDamage, GameObject damageSource)
        {
            if (Health)
            {
                var totalDamage = damage;

                // skip the crit multiplier if it's from an explosion
                if (!isExplosionDamage)
                {
                    totalDamage *= DamageMultiplier;
                }

                // potentially reduce damages if inflicted by self
                if (Health.gameObject == damageSource)
                {
                    totalDamage *= SensibilityToSelfdamage;
                }

                //reduce the damage by shield
                if (totalDamage > ShieldValue)
                {
                    totalDamage -= ShieldValue;
                    ShieldValue = 0;
                    // the broken shield would lead to a punishment to the player
                    updateShieldDDL = Time.time + BrokenShieldRecoverFrequency;

                }
                else
                {
                    ShieldValue -= totalDamage;
                    totalDamage = 0;
                }
                // apply the damages finally
                Health.TakeDamage(totalDamage, damageSource);
            }
        }
    }
}